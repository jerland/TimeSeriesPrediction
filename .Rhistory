acf(export[, 2])
install.packages("readxl")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("timeSeries")
install.packages("ggfortify")
library("readxl")
library("dplyr")
library("ggplot2")
library("timeSeries")
library("ggfortify")
export <- read_excel("export.xlsx")
mutate(export, datum=as.Date(datum, format = "%Y-%m-%d"), pos=as.numeric(pos))
ts_export <- ts(export[, 2], frequency = 365, start=c(2015))
mts_export <- msts(export[, 2], seasonal.periods = c(7, 91.3125, 365.25) , start=c(2015))
#Look at timeseries weekly and monthly
print(ts_export)
autoplot(ts_export)
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2])
pacf(export[, 2])
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 100)
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 400)
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2])
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 1000)
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 250)
#Create and test harmonic regressors
fit <- tslm(mts_export ~ fourier(mts_export, K = c(10,10)))
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 250)
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 50)
fit <- tslm(mts_export ~ fourier(mts_export, K = c(10,10)))
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(10,10), h = 30)))
mts_export %>% mstl() %>%
autoplot()
export <- read_excel("export.xlsx")
mutate(export, datum=as.Date(datum, format = "%Y-%m-%d"), pos=as.numeric(pos))
ts_export <- ts(export[, 2], frequency = 365, start=c(2015))
mts_export <- msts(export[, 2], seasonal.periods = c(7, 91.3125, 365.25) , start=c(2015))
#Look at timeseries weekly and monthly
print(ts_export)
autoplot(ts_export)
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 50)
pacf(export[, 2])
seasonplot(mts_export)
#KPSS, Box-test, augmented dickey fueller tests
Box.test(ts_export)
kpss.test(ts_export)
adf.test(ts_export)
#Forecasting using STL
mts_export %>% stlf() %>% autoplot()
mts_export <- msts(export[, 2], seasonal.periods = c(7, 91.3125, 365.25) , start=c(2015))
library("forecast")
mts_export <- msts(export[, 2], seasonal.periods = c(7, 91.3125, 365.25) , start=c(2015))
export <- read_excel("export.xlsx")
mutate(export, datum=as.Date(datum, format = "%Y-%m-%d"), pos=as.numeric(pos))
ts_export <- ts(export[, 2], frequency = 365, start=c(2015))
mts_export <- msts(export[, 2], seasonal.periods = c(7, 91.3125, 365.25) , start=c(2015))
#Look at timeseries weekly and monthly
print(ts_export)
autoplot(ts_export)
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 50)
pacf(export[, 2])
seasonplot(mts_export)
#KPSS, Box-test, augmented dickey fueller tests
Box.test(ts_export)
kpss.test(ts_export)
adf.test(ts_export)
#Forecasting using STL
mts_export %>% stlf() %>% autoplot()
seasonplot(mts_export)
#Forecasting using STL
mts_export %>% stlf() %>% autoplot()
#Plotting MSTL to see seasonality, trend, and remainder component
mts_export %>% mstl() %>%
autoplot()
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2], lag.max = 365)
fit <- tslm(mts_export ~ fourier(mts_export, K = c(10,10, 10)))
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(10,10, 10), h = 30)))
fit <- tslm(mts_export ~ fourier(mts_export, K = c(10,10, 10))
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(10,10,10), h = 30)))
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(10,10,10), h = 30)))
fit <- tslm(mts_export ~ fourier(mts_export, K = c(10,10, 10)))
fit <- tslm(mts_export ~ fourier(mts_export, K = c(7,10, 10)))
fit <- tslm(mts_export ~ fourier(mts_export, K = c(2,10, 10)))
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(10,10,10), h = 30)))
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(2,10, 10), h = 30)))
autoplot(fc)
#Create and test harmonic regressors
fit <- tslm(mts_export ~ fourier(mts_export, K = c(3,30, 30)))
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(3,30, 30), h = 30)))
autoplot(fc)
#Create and test harmonic regressors
fit <- tslm(mts_export ~ fourier(mts_export, K = c(3,30, 30), lambda = 0))
#Create and test harmonic regressors
fit <- tslm(mts_export ~ fourier(mts_export, K = c(3,30, 30)), lambda = 0)
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(3,30, 30), h = 30)))
autoplot(fc)
#Create and test harmonic regressors
fit <- tslm(mts_export ~ fourier(mts_export, K = c(1,1, 1)), lambda = 0)
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(1,1, 1), h = 30)))
autoplot(fc)
#Create and test harmonic regressors
fit <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc)
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,"   AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots
install.packages("Metrics")
library(metrics)
library("metrics")
library("Metrics")
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,", RMSE=",round(fit[["rmse"]], 2)" AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,", RMSE=",round(fit[["rmse"]], 2)" AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,", RMSE=",round(fit[["rmse"]], 2)" AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,"RMSE=",round(fit[["rmse"]], 2),"RM AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,"RMSE=",round(fit[["rmse"]], 2),"RM AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=4)
plots
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,"RMSE=",round(fit[["rmse"]], 2),"RM AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,"RMSE=",round(fit[["rmse"]], 2),"RM AICC=",round(fit[["aicc"]],2)), accuracy(plots[i])) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i,"RMSE=",round(fit[["rmse"]], 2),"RM AICC=",round(fit[["aicc"]],2), "Accuracy=",accuracy(plots[i]))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i," AICC=",round(fit[["aicc"]],2), "Accuracy=",accuracy(plots[i]))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots
plots <- list()
for (i in seq(3)) {
fit <- auto.arima(ts_export, xreg = fourier(ts_export, K = i),
seasonal = FALSE, lambda = 0)
plots[[i]] <- autoplot(forecast(fit,
xreg=fourier(ts_export, K=i, h=30))) +
xlab(paste("K=",i," AICC=",round(fit[["aicc"]],2))) +
ylab("") + ylim(0,52000) + xlim(2019,2019.5)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
nrow=3)
plots
fit_tslm <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc) + xlab(paste("AICC=", round(fit_tslm[["aicc"]], 2)))
fit_tslm <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc) + xlab("test")
fit_tslm <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit_tslm, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc) + xlab("test")
fit_tslm <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit_tslm, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc) + xlab("AIC="AIC(fit_tslm))
fit_tslm <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit_tslm, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc) + xlab("AIC=", AIC(fit_tslm))
fit_tslm <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit_tslm, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc) + xlab("AIC=", aic(fit_tslm))
AIC(fit_tslm)
tslm_tbats <- tbats(mts_export)
fc2 <- forecast(tslm_tbats, h=30)
plot(fc2)
fit_tslm <- tslm(mts_export ~ fourier(mts_export, K = c(3,44, 170)), lambda = 0)
fc <- forecast(fit_tslm, newdata = data.frame(fourier(mts_export, K = c(3,44, 170), h = 30)))
autoplot(fc) + xlab("AIC=", AIC(fit_tslm))
tslm_tbats
mts_tbats <- tbats(mts_export)
fc2 <- forecast(mts_tbats, h=30)
plot(fc2)
mts_tbats$AIC
mts_export %>% mstl() %>%
autoplot()
fit2 <- auto.arima(mts_export, xreg=fourier(mts_export, K=c(2, 44, 175)), seasonal=FALSE, lambda=0)
library("readxl")
library("dplyr")
library("ggplot2")
library("timeSeries")
library("ggfortify")
library("forecast")
library("Metrics")
export <- read_excel("export.xlsx")
mutate(export, datum=as.Date(datum, format = "%Y-%m-%d"), pos=as.numeric(pos))
ts_export <- ts(export[, 2], frequency = 365, start=c(2015))
mts_export <- msts(export[, 2], seasonal.periods = c(7, 91.3125, 365.25) , start=c(2015))
#Look at timeseries weekly and monthly
autoplot(ts_export)
autoplot(ts_export) + ylab("Positions")
#Analyse autocorrelation and partial autocorrelation in the original time series
acf(export[, 2])
View(export)
mts_export %>% mstl() %>%
autoplot()
acf(mts_export)
mts_tbats <- tbats(mts_export)
fc2 <- forecast(mts_tbats, h=30)
plot(fc2)
mts_tbats <- tbats(ts_export)
fc2 <- forecast(mts_tbats, h=30)
plot(fc2)
pacf(export[, 2])
pacf(export[, 2], lag.max=100)
pacf(export[, 2], lag.max=150)
pacf(export[, 2], lag.max=365)
seasonplot(mts_export)
mts_tbats <- tbats(mts_export)
ts_tbats <- tbats(ts_export)
fc2 <- forecast(mts_tbats, h=30)
fc3 <- forecast(ts_tbats, h=30)
fit2 <- auto.arima(mts_export, xreg=fourier(mts_export, K=c(2, 44, 175)), seasonal=FALSE, lambda=0)
accuracy(mts_tbats)
library("forecast")
library("forecast", lib.loc="~/R/R-3.5.1/library")
accuracy(mts_tbats, packageName('forecast'))
mts_export %>% stlf() %>% autoplot()
mts_tbats?
#Checking residuals
AIC(fit_tslm)
?mts_tbats
?tbats
